#pragma kernel CSMain

#include "InstanceData.cginc"

int2 _gridDimensions;
float4 _baseColor;
float4 _tintColor;
float3 _instanceBBoxCenter;
float3 _instanceBBoxExtents;
float3 _origin;
float2 _spacing;

RWStructuredBuffer<GrassInstanceData> _grassInstances;
RWStructuredBuffer<BBox> _bBoxes;

[numthreads(8,8,1)]
void CSMain(uint3 DTid : SV_DispatchThreadID)
{
    int instanceId = DTid.x + DTid.y * _gridDimensions.x;

    float3 position = float3(DTid.x * _spacing.x, 0, DTid.y * _spacing.y) + _origin;
    float3 normal   = float3(0, 1.0f, 0);
    float3 binormal = float3(1.0f, 0, 0); // normalize(cross(normal, float3(0, 0, 1.0f)));
    float3 tangent  = float3(0, 0, 1.0f); // normalize(cross(normal, binormal));

    float angle = rand(uint3(DTid.xy, 1)) * E_PI;
    float dx    = rand(uint3(DTid.xy, 2)) * _spacing.x;
    float dz    = rand(uint3(DTid.xy, 3)) * _spacing.y;

    position += (dx * binormal + dz * tangent);

    float4x4 mat;
    mat[0] = float4(binormal.x * cos(angle), normal.x, tangent.x * sin(angle), position.x);
    mat[1] = float4(binormal.y, normal.y, tangent.y, position.y);
    mat[2] = float4(-binormal.z * sin(angle), normal.z, tangent.z * cos(angle), position.z);
    mat[3] = float4(0, 0, 0, 1.0f);

    _grassInstances[instanceId].mat = mat;
    _grassInstances[instanceId].color = lerp(_baseColor, _tintColor, rand(float3(DTid.xy, 4)));
    
    _bBoxes[instanceId].center = position + _instanceBBoxCenter;
    _bBoxes[instanceId].extents = _instanceBBoxExtents;
}
