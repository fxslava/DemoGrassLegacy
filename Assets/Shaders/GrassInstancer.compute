#pragma kernel GrassInstanceCounter
#pragma kernel GrassInstancer
#pragma kernel DebugGrassInstancer

#include "InstanceData.cginc"

float4 _baseColor;
float4 _tintColor;
float _DensityScale;

Texture2D<float4> _PositionMap;
Texture2D<float3> _NormalMap;
Texture2D<float4> _DensityMap;

RWStructuredBuffer<GrassInstanceData> _grassInstances;
RWStructuredBuffer<int> _bayerMatrix;
RWStructuredBuffer<int> _argsBuffer;
RWStructuredBuffer<int2> _indirectBuffer;

[numthreads(8,8,1)]
void GrassInstanceCounter (uint3 DTid : SV_DispatchThreadID, uint GI : SV_GroupIndex) 
{
    const float density = _PositionMap[DTid.xy].w * /*_DensityMap[DTid.xy].r */ _DensityScale;
    const float threashold = float(_bayerMatrix[GI]) * (1.0f / 64.0f);

    if (_PositionMap[DTid.xy].w > 0.001f && density > threashold) {
        int instanceId;
        InterlockedAdd(_argsBuffer[1], 1, instanceId);
        _indirectBuffer[instanceId] = DTid.xy;
    }
}

[numthreads(64,1,1)]
void GrassInstancer (uint3 DTid : SV_DispatchThreadID) 
{
    int instanceId = DTid.x;
    int2 texCoords = _indirectBuffer[instanceId];

    float3 position = _PositionMap[texCoords].xyz;
    float3 normal   = normalize(_NormalMap[texCoords]);
    float3 binormal = normalize(cross(normal, float3(0, 1, 0)));
    float3 tangent  = normalize(cross(normal, binormal));

    float angle = rand(uint3(DTid.xy, 0)) * 3.14;
    float dx = rand(uint3(DTid.xy, 1));
    float dz = rand(uint3(DTid.xy, 2));

    position += (dx * binormal + dz * tangent) * 0.1f;

    float4x4 mat;
    mat[0] = float4( binormal.x * cos(angle), normal.x, tangent.x * sin(angle), position.x);
    mat[1] = float4( binormal.y,              normal.y, tangent.y,              position.y);
    mat[2] = float4(-binormal.z * sin(angle), normal.z, tangent.z * cos(angle), position.z);
    mat[3] = float4(0,0,0,1.0f);

    _grassInstances[instanceId].mat = mat;
    _grassInstances[instanceId].color = lerp(_baseColor, _tintColor, rand(uint3(DTid.xy, 3)));
}

RWStructuredBuffer<float3> _positionsBuffer;
RWStructuredBuffer<float3> _normalsBuffer;

[numthreads(64,1,1)]
void DebugGrassInstancer (uint3 DTid : SV_DispatchThreadID) 
{
    int instanceId = DTid.x;
    int2 texCoords = _indirectBuffer[instanceId];
    _positionsBuffer[instanceId] = _PositionMap[texCoords].xyz;
    _normalsBuffer[instanceId] = _NormalMap[texCoords].xyz;
}
